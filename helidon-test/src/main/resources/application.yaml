app:
  greeting: "Hello"

server:
  port: 8080
  host: 0.0.0.0

#  experimental:
#    http2:
#      enable: true
#      max-content-length: 16384

security:
  config:
    # Configuration of secured config (encryption of passwords in property files)
    # Set to true for production - if set to true, clear text passwords will cause failure
    require-encryption: false
  providers:
    # Security provider - basic authentication (supports roles) - default
    - http-basic-auth:
        realm: "mic"
        users:
          - login: "jzb"
            password: "test"
            roles: ["user", "admin"]
          - login: "12000077"
            password: "test"
            roles: ["user", "admin"]
  #    - jwt:
  #        atn-token:
  #          jwk-path: "/config/securiy/verify-jwk.json"
  #          jwt-audience: "my.service"
  #        sign-token:
  #          jwk-path: "/config/security/sign-jwk.json"
  #          jwt-issuer: "http://www.example.org/myservice"
  #          outbound:
  #            - name: "internal-services"
  #              # create a new token
  #              hosts:
  #                - "*.example.org"
  #              jwk-kid: "internal-key"
  #              jwt-audience: "http://www.example.org/services"
  #            - name: "b2b-service-49"
  #              # create a new token and send it in a custom header
  #              hosts:
  #                - "b2b.partner.org"
  #              paths:
  #                - "/services/49"
  #              jwk-kid: "partner-b2b"
  #              jwt-audience: "http://b2b.partner.org"
  #              outbound-token:
  #                header: "X-Partner-Auth"
  #            - name: "as-is"
  #              # identity propagation (use existing token)
  #              hosts:
  #                - "*.internal.org"
web-server:
  defaults:
    authenticate: true
  paths:
    - path: "/"
      roles-allowed: ["admin"]

grpc-server:
  # Configuration of integration with gRPC server
  defaults:
    authenticate: true
  # Configuration security for individual services
  services:
    - name: "GreetService"
      defaults:
      roles-allowed: ["user"]
      # Configuration security for individual methods of the service
      methods:
        - name: "SetGreeting"
          roles-allowed: ["admin"]

tracing:
  service: "helidon-test"
  #  protocol: "https"     # JAEGER_ENDPOINT (if not udp, http is expected and endpoint is filled)
  host: "192.168.0.38"   # JAEGER_ENDPOINT
  #  port: 14240           # JAEGER_ENDPOINT
  #  path: "/api/traces/mine"   # JAEGER_ENDPOINT
  #  token: "token"        # JAEGER_AUTH_TOKEN
  # Either token or username/password
  #username:  "user"     # JAEGER_USER
  #password: "pass"      # JAEGER_PASSWORD
#  propagation: "jaeger" # JAEGER_PROPAGATION either "jaeger" or "b3"
#  log-spans: false      # JAEGER_REPORTER_LOG_SPANS
#  max-queue-size: 42    # JAEGER_REPORTER_MAX_QUEUE_SIZE
#  flush-interval-ms: 10001 # JAEGER_REPORTER_FLUSH_INTERVAL
#  sampler-type: "remote"# JAEGER_SAMPLER_TYPE (https://www.jaegertracing.io/docs/latest/sampling/#client-sampling-configuration)
#  sampler-param: 0.5    # JAEGER_SAMPLER_PARAM (number)
#  sampler-manager: "localhost:47877" # JAEGER_SAMPLER_MANAGER_HOST_PORT
#  tags:
#    tag1: "tag1-value"  # JAEGER_TAGS
#    tag2: "tag2-value"  # JAEGER_TAGS
#  boolean-tags:
#    tag3: true          # JAEGER_TAGS
#    tag4: false         # JAEGER_TAGS
#  int-tags:
#    tag5: 145           # JAEGER_TAGS
#    tag6: 741           # JAEGER_TAGS